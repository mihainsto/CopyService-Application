{"version":3,"sources":["logo.svg","progressBar/ProgressBar.jsx","job/job.jsx","layout/layout.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","ProgressBar","props","className","style","width","progress","backgroundColor","status","override","css","IOSSwitch","withStyles","theme","root","height","padding","margin","spacing","switchBase","transform","color","palette","common","white","opacity","border","thumb","track","borderRadius","grey","transition","transitions","create","checked","focusVisible","classes","Switch","focusVisibleClassName","disableRipple","getLoaderStatus","Job","paddingRight","size","loading","canceled","switchChecked","onChange","onSwitchClick","onClick","value","onClickCancel","id","Layout","useState","list","jobs","switchStatus","setSwitchStatus","cancelClicked","console","log","swichClicked","map","item","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0830c3c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./progressbar.scss\";\nconst max_width = 500;\n\nconst getWidthFromProgress = (progress) => (progress * max_width) / 100;\n// const getColor = (canceled) => {\n//   if (canceled === true) {\n//     return \"#f46c6c\";\n//   }\n//   return \"#36a784\";\n// };\nconst getColor = (status) => {\n  if (status == \"canceled\"){\n    return \"#f46c6c\";\n  }\n  if (status == \"working\"){\n    return \"#36a784\";\n  }\n  return \"#FFAE42\"\n\n}\nconst getStatus = (canceled) => {\n  if (canceled === true) {\n    return \"Canceled\";\n  }\n  return \"\";\n};\nconst ProgressBar = (props) => {\n  return (\n    <div>\n      <div className=\"progressBarBG\"></div>\n      <div\n        className=\"progressBar\"\n        style={{\n          width: getWidthFromProgress(props.progress),\n          backgroundColor: getColor(props.status),\n        }}\n      >\n        <span className=\"infoText\">{props.status}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default ProgressBar;\n","import React from \"react\";\nimport \"./job.scss\";\nimport FadeLoader from \"react-spinners/FadeLoader\";\nimport { css } from \"@emotion/core\";\nimport ProgressBar from \"../progressBar/ProgressBar\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { purple } from \"@material-ui/core/colors\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\nconst IOSSwitch = withStyles((theme) => ({\n  root: {\n    width: 42,\n    height: 26,\n    padding: 0,\n    margin: theme.spacing(1),\n  },\n  switchBase: {\n    padding: 1,\n    \"&$checked\": {\n      transform: \"translateX(16px)\",\n      color: theme.palette.common.white,\n      \"& + $track\": {\n        backgroundColor: \"#36a784\",\n        opacity: 1,\n        border: \"none\",\n      },\n    },\n    \"&$focusVisible $thumb\": {\n      color: \"#52d869\",\n      border: \"6px solid #fff\",\n    },\n  },\n  thumb: {\n    width: 24,\n    height: 24,\n  },\n  track: {\n    borderRadius: 26 / 2,\n    border: `1px solid ${theme.palette.grey[400]}`,\n    backgroundColor: theme.palette.grey[50],\n    opacity: 1,\n    transition: theme.transitions.create([\"background-color\", \"border\"]),\n  },\n  checked: {},\n  focusVisible: {},\n}))(({ classes, ...props }) => {\n  return (\n    <Switch\n      focusVisibleClassName={classes.focusVisible}\n      disableRipple\n      classes={{\n        root: classes.root,\n        switchBase: classes.switchBase,\n        thumb: classes.thumb,\n        track: classes.track,\n        checked: classes.checked,\n      }}\n      {...props}\n    />\n  );\n});\n\nconst getLoaderStatus = (status) => {\n  if (status===\"working\"){\n    return true\n  }\n  return false\n}\nconst getLoaderPadding = (status) => {\n  if (status===\"working\"){\n    return 0\n  }\n  return 60\n}\nconst Job = (props) => {\n  return (\n    <div className=\"job\">\n      <div className=\"jobContents\">\n        <div className=\"text\">JOB #1</div>\n        <div className=\"loader\" style={{paddingRight: getLoaderPadding(props.status)}}>\n          <FadeLoader\n            css={override}\n            size={150}\n            color={\"#36D7B7\"}\n            loading={getLoaderStatus(props.status)}\n          />\n        </div>\n        <div className=\"progressbar\">\n          <ProgressBar\n            progress={props.progress}\n            canceled={props.canceled}\n            status={props.status}\n          ></ProgressBar>\n        </div>\n        <div className=\"switch\">\n          <IOSSwitch checked={props.switchChecked} onChange={props.onSwitchClick}></IOSSwitch>\n        </div>\n        <button\n          className=\"btn\"\n          onClick={(value) => props.onClickCancel(value, props.id)}\n        >\n          {\" \"}\n          Cancel\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Job;\n","import React, { useState } from \"react\";\nimport \"./layout.scss\";\n\nimport Job from \"../job/job\";\n\nconst Layout = () => {\n  const [jobs, setJobs] = useState({\n    list: [\n      { id: \"1\", progress: 60, status: \"working\" },\n      { id: \"2\", progress: 100, status: \"canceled\" },\n      { id: \"3\", progress: 30, status: \"paused\" },\n    ],\n  });\n  const [switchStatus, setSwitchStatus] = useState(\"true\");\n  const cancelClicked = (value, id) => {\n    console.log(id)\n  };\n  const swichClicked = (value) => {\n    setSwitchStatus(\"false\")\n  }\n  return (\n    <div className=\"layout\">\n      <div className=\"title\">Copy Service</div>\n      <div className=\"buttonContainer\">\n        <button>Select Input File Path</button>\n\n        <button>Select Output File Path</button>\n\n        <button>Add Copy Job</button>\n      </div>\n      <div className=\"jobsContainer\">\n        {jobs.list.map((item) => (\n          <Job\n            id={item.id}\n            status={item.status}\n            progress={item.progress}\n            onClickCancel={cancelClicked}\n            onSwitchClick={swichClicked}\n            switchChecked={switchStatus}\n            className=\"job\"\n          ></Job>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Layout;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Layout from \"./layout/layout\"\n\nfunction App() {\n  return (\n    <Layout></Layout>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}