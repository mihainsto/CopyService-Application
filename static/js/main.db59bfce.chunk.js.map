{"version":3,"sources":["logo.svg","layout/api.jsx","progressBar/ProgressBar.jsx","job/job.jsx","layout/layout.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","lodash","require","url","findJobIndex","jobList","id","i","length","toString","createCopyJob","from","to","state","setState","a","apiCreateJob","response","json","console","log","pauseCopyJob","apiPauseJob","resumeCopyJob","apiResumeJob","cancelCopyJob","apiCancelJob","curentJobs","cloneDeep","jobIndex","list","splice","updateAllJobsFull","apiAllJobs","jobsAr","status","apiStatus","progress","parseInt","parseFloat","data","push","switchStatus","fetch","method","headers","Accept","body","JSON","stringify","ProgressBar","props","className","style","width","backgroundColor","override","css","IOSSwitch","withStyles","theme","root","height","padding","margin","spacing","switchBase","transform","color","palette","common","white","opacity","border","thumb","track","borderRadius","grey","transition","transitions","create","checked","focusVisible","classes","Switch","focusVisibleClassName","disableRipple","getLoaderStatus","Job","paddingRight","size","loading","canceled","switchChecked","onChange","value","onSwitchClick","index","onClick","onClickCancel","Layout","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","useInterval","jobs","setJobs","useState","setSwitchStatus","pathFrom","setPathFrom","pathTo","setPathTo","cancelClicked","swichClicked","oldList","type","class","placeholder","document","getElementById","map","item","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.db59bfce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const lodash = require(\"lodash\");\nconst url = \"http://127.0.0.1:5000/\";\n\nconst findJobIndex = (jobList, id) => {\n  for (let i = 0; i < jobList.length; i++) {\n    if (jobList[i].id === id.toString()) {\n      return i;\n    }\n  }\n  return -1;\n};\nexport const alterCopyJob = (\n  id,\n  state,\n  setState,\n  progress = null,\n  status = null\n) => {\n  const curentJobs = lodash.cloneDeep(state);\n  let jobIndex = findJobIndex(curentJobs.list, id);\n  console.log(jobIndex);\n  if (jobIndex === -1) {\n    curentJobs.list.push({\n      id: id,\n      progress: 0,\n      status: \"working\",\n      switchStatus: true,\n    });\n  }\n  jobIndex = findJobIndex(curentJobs.list, id);\n  if (progress != null) {\n    curentJobs.list[jobIndex].progress = progress;\n  }\n  if (status != null) {\n    curentJobs.list[jobIndex].status = status;\n  }\n  setState(curentJobs);\n};\n\nexport const createCopyJob = async (from, to, state, setState) => {\n  const response = await apiCreateJob(from, to);\n  var json = await response.json();\n  console.log(json);\n  const id = json.id;\n\n};\nexport const pauseCopyJob = async (id) => {\n  console.log(id);\n  const response = await apiPauseJob(id);\n  const json = await response.json();\n  console.log(json);\n};\nexport const resumeCopyJob = async (id) => {\n  const response = await apiResumeJob(id);\n  const json = await response.json();\n  console.log(json);\n};\nexport const updateCopyJob = async (id, state, setState) => {\n  const curentJobs = lodash.cloneDeep(state);\n  const response = await apiStatus(id);\n  const json = await response.json();\n  const progress = parseInt(parseFloat(json.data) * 100); // TODO: API request\n  alterCopyJob(id, state, setState, progress);\n};\nexport const cancelCopyJob = async (id, state, setState) => {\n  const response = await apiCancelJob(id);\n  const json = await response.json();\n  console.log(json);\n\n  const curentJobs = lodash.cloneDeep(state);\n  let jobIndex = findJobIndex(curentJobs.list, id);\n  console.log(jobIndex);\n  if (jobIndex === -1) {\n    return -1\n  }\n  curentJobs.list.splice(jobIndex, 1)\n  setState(curentJobs);\n};\nexport const updateAllJobsFull = async (state, setState) => {\n  const response = await apiAllJobs();\n  const json = await response.json();\n  const jobsAr = json[\"data\"];\n  const curentJobs = lodash.cloneDeep(state);\n  for (let i = 0; i < jobsAr.length; i++) {\n    console.log(state)\n    const status = null\n    let id = jobsAr[i];\n    const response = await apiStatus(id);\n    const json = await response.json();\n    const progress = parseInt(parseFloat(json.data) * 100); // TODO: API request\n    let jobIndex = findJobIndex(curentJobs.list, id);\n    if (jobIndex === -1) {\n      curentJobs.list.push({\n        id: id,\n        progress: 0,\n        status: \"working\",\n        switchStatus: true,\n      });\n    }\n    jobIndex = findJobIndex(curentJobs.list, id);\n    if (progress != null) {\n      curentJobs.list[jobIndex].progress = progress;\n    }\n    if (status != null) {\n      curentJobs.list[jobIndex].status = status;\n    }\n  }\n  setState(curentJobs);\n};\n\nexport function sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n\nconst apiCreateJob = async (from, to) => {\n  const response = await fetch(url + \"copy\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n    },\n    body: JSON.stringify({\n      from: from,\n      to: to,\n    }),\n  });\n  return response;\n};\n\nconst apiPauseJob = async (id) => {\n  const response = await fetch(url + \"suspend\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n    },\n    body: JSON.stringify({\n      id: id,\n    }),\n  });\n  return response;\n};\n\nconst apiCancelJob = async (id) => {\n  const response = await fetch(url + \"stop\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n    },\n    body: JSON.stringify({\n      id: id,\n    }),\n  });\n  return response;\n};\n\nconst apiResumeJob = async (id) => {\n  const response = await fetch(url + \"resume\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n    },\n    body: JSON.stringify({\n      id: id,\n    }),\n  });\n  return response;\n};\n\nconst apiAllJobs = async () => {\n  const response = await fetch(url + \"allJobs\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n    },\n    body: JSON.stringify({}),\n  });\n  return response;\n};\n\nconst apiStatus = async (id) => {\n  const response = await fetch(url + \"status\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n    },\n    body: JSON.stringify({\n      id: id,\n    }),\n  });\n  return response;\n};\n","import React from \"react\";\nimport \"./progressbar.scss\";\nconst max_width = 500;\n\nconst getWidthFromProgress = (progress) => (progress * max_width) / 100;\n// const getColor = (canceled) => {\n//   if (canceled === true) {\n//     return \"#f46c6c\";\n//   }\n//   return \"#36a784\";\n// };\nconst getColor = (status) => {\n  if (status == \"canceled\"){\n    return \"#f46c6c\";\n  }\n  if (status == \"working\"){\n    return \"#36a784\";\n  }\n  return \"#FFAE42\"\n\n}\nconst getStatus = (canceled) => {\n  if (canceled === true) {\n    return \"Canceled\";\n  }\n  return \"\";\n};\nconst ProgressBar = (props) => {\n  return (\n    <div>\n      <div className=\"progressBarBG\"></div>\n      <div\n        className=\"progressBar\"\n        style={{\n          width: getWidthFromProgress(props.progress),\n          backgroundColor: getColor(props.status),\n        }}\n      >\n        <span className=\"infoText\">{props.status}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default ProgressBar;\n","import React from \"react\";\nimport \"./job.scss\";\nimport FadeLoader from \"react-spinners/FadeLoader\";\nimport { css } from \"@emotion/core\";\nimport ProgressBar from \"../progressBar/ProgressBar\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { purple } from \"@material-ui/core/colors\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\nconst IOSSwitch = withStyles((theme) => ({\n  root: {\n    width: 42,\n    height: 26,\n    padding: 0,\n    margin: theme.spacing(1),\n  },\n  switchBase: {\n    padding: 1,\n    \"&$checked\": {\n      transform: \"translateX(16px)\",\n      color: theme.palette.common.white,\n      \"& + $track\": {\n        backgroundColor: \"#36a784\",\n        opacity: 1,\n        border: \"none\",\n      },\n    },\n    \"&$focusVisible $thumb\": {\n      color: \"#52d869\",\n      border: \"6px solid #fff\",\n    },\n  },\n  thumb: {\n    width: 24,\n    height: 24,\n  },\n  track: {\n    borderRadius: 26 / 2,\n    border: `1px solid ${theme.palette.grey[400]}`,\n    backgroundColor: theme.palette.grey[50],\n    opacity: 1,\n    transition: theme.transitions.create([\"background-color\", \"border\"]),\n  },\n  checked: {},\n  focusVisible: {},\n}))(({ classes, ...props }) => {\n  return (\n    <Switch\n      focusVisibleClassName={classes.focusVisible}\n      disableRipple\n      classes={{\n        root: classes.root,\n        switchBase: classes.switchBase,\n        thumb: classes.thumb,\n        track: classes.track,\n        checked: classes.checked,\n      }}\n      {...props}\n    />\n  );\n});\n\nconst getLoaderStatus = (status) => {\n  if (status === \"working\") {\n    return true;\n  }\n  return false;\n};\nconst getLoaderPadding = (status) => {\n  if (status === \"working\") {\n    return 0;\n  }\n  return 60;\n};\nconst Job = (props) => {\n  return (\n    <div className=\"job\">\n      <div className=\"jobContents\">\n        <div className=\"text\">JOB #{props.id}</div>\n        <div\n          className=\"loader\"\n          style={{ paddingRight: getLoaderPadding(props.status) }}\n        >\n          <FadeLoader\n            css={override}\n            size={150}\n            color={\"#36D7B7\"}\n            loading={getLoaderStatus(props.status)}\n          />\n        </div>\n        <div className=\"progressbar\">\n          <ProgressBar\n            progress={props.progress}\n            canceled={props.canceled}\n            status={props.status}\n          ></ProgressBar>\n        </div>\n        <div className=\"switch\">\n          <IOSSwitch\n            checked={props.switchChecked}\n            onChange={(value) => props.onSwitchClick(value, props.id, props.index)}\n          ></IOSSwitch>\n        </div>\n        <button\n          className=\"btn\"\n          onClick={(value) => props.onClickCancel(value, props.id, props.index)}\n        >\n          {\" \"}\n          Cancel\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Job;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./layout.scss\";\nimport {\n  createCopyJob,\n  resumeCopyJob,\n  pauseCopyJob,\n  cancelCopyJob,\n  updateAllJobsFull,\n} from \"./api\";\nimport Job from \"../job/job\";\nconst Layout = () => {\n  function useInterval(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n      savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n      function tick() {\n        savedCallback.current();\n      }\n      if (delay !== null) {\n        let id = setInterval(tick, delay);\n        return () => clearInterval(id);\n      }\n    }, [delay]);\n  }\n  useInterval(() => {\n    updateAllJobsFull(jobs, setJobs);\n  }, 1000);\n\n  const [jobs, setJobs] = useState({\n    list: [],\n  });\n  const [switchStatus, setSwitchStatus] = useState(\"true\");\n  const [pathFrom, setPathFrom] = useState(\"\");\n  const [pathTo, setPathTo] = useState(\"\");\n  const useForceUpdate = () => useState()[1];\n\n  const cancelClicked = (value, id, index) => {\n    cancelCopyJob(id, jobs, setJobs);\n  };\n\n  const swichClicked = (value, id, index) => {\n    setSwitchStatus(false);\n    console.log(index);\n    const oldList = jobs.list;\n    const curent_status = oldList[index].switchStatus;\n    if (curent_status === false) {\n      oldList[index].switchStatus = true;\n      oldList[index].status = \"working\";\n      resumeCopyJob(oldList[index].id);\n    } else {\n      oldList[index].switchStatus = false;\n      oldList[index].status = \"paused\";\n      pauseCopyJob(oldList[index].id);\n    }\n\n    setJobs({ list: oldList });\n  };\n  const addJobClicked = () => {\n    createCopyJob(pathFrom, pathTo, jobs, setJobs);\n  };\n  const pathFromChangedValue = (value) => {\n    setPathFrom(document.getElementById(\"pathFrom\").value);\n  };\n  const pathToChangedValue = (value) => {\n    setPathTo(document.getElementById(\"pathTo\").value);\n  };\n  return (\n    <div className=\"layout\">\n      <div className=\"title\">Copy Service</div>\n      <div className=\"buttonContainer\">\n        {/*<button>Select Input File Path</button>*/}\n        <input\n          id=\"pathFrom\"\n          type=\"text\"\n          class=\"form-control\"\n          placeholder=\"Input Path\"\n          value={pathFrom}\n          onChange={pathFromChangedValue}\n        />\n\n        {/*<button>Select Output File Path</button>*/}\n        <input\n          id=\"pathTo\"\n          type=\"text\"\n          class=\"form-control\"\n          placeholder=\"Output path\"\n          value={pathTo}\n          onChange={pathToChangedValue}\n        />\n        <button onClick={addJobClicked}>Add Copy Job</button>\n      </div>\n      <div className=\"jobsContainer\">\n        {jobs.list.map((item, index) => (\n          <Job\n            id={item.id}\n            status={item.status}\n            progress={item.progress}\n            onClickCancel={cancelClicked}\n            onSwitchClick={swichClicked}\n            switchChecked={item.switchStatus}\n            index={index}\n            className=\"job\"\n          ></Job>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Layout;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Layout from \"./layout/layout\"\n\nfunction App() {\n  return (\n    <Layout></Layout>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}